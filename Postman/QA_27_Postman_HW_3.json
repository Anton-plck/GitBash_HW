{
	"info": {
		"_postman_id": "f4b13083-5bc6-4b1a-a8e0-f951de720085",
		"name": "QA_27_Postman_HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17954297"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"token\", jsonData.token);\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "login",
							"type": "text"
						},
						{
							"key": "password",
							"value": "parol",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let test = pm.response.json();\r",
							"\r",
							"//Проверка структуры json в ответе.\r",
							"let schema_1 = {\r",
							"    \"type\":\"object\",\r",
							"    \"properties\": {\r",
							"        \"person\": {\r",
							"            \"type\":\"object\"\r",
							"        }\r",
							"\t},\r",
							"    \"properties\": {\r",
							"        \"u_age\": {\r",
							"            \"type\":\"number\"\r",
							"            },\r",
							"\t\t\"u_name\": {\r",
							"\t\t\t\"type\":\"array\",\r",
							"\t\t\t\"items\":[\r",
							"\t\t\t\t{\"type\":\"string\"},\r",
							"\t\t\t\t{\"type\":\"number\"},\r",
							"\t\t\t\t{\"type\":\"number\"}\r",
							"\t\t\t]\r",
							"\t\t},\r",
							"\t\t\"u_salary_1_5_year\": {\r",
							"\t\t\t\"type\":\"number\"\r",
							"\t\t}\r",
							"        },\r",
							"\r",
							"\t\t\"qa_salary_after_12_months\": { \r",
							"\t\t\t\"type\": \"number\" },\r",
							"    \t\"qa_salary_after_6_months\": { \r",
							"\t\t\t\"type\": \"number\" },\r",
							"    \t\"start_qa_salary\": { \r",
							"\t\t\t\"type\": \"number\" }\r",
							"        };\r",
							"\r",
							"pm.test('Проверка структуры json в ответе', function() {\r",
							"    pm.expect(tv4.validate(test, schema_1)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"check u_salary_1_5_year = 2000\", function () {\r",
							"    pm.expect(test.person.u_salary_1_5_year).to.eql(test.start_qa_salary*4);\r",
							"});\r",
							"\r",
							"pm.test(\"check u_salary_12_months = 1450\", function () {\r",
							"    pm.expect(test.qa_salary_after_12_months).to.eql(test.start_qa_salary*2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"check u_salary_6_months = 1000\", function () {\r",
							"    pm.expect(test.qa_salary_after_6_months).to.eql(test.start_qa_salary*2);\r",
							"});\r",
							"\r",
							"//Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"pm.environment.set(\"u_salary_1.5_year\", test.person.u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\":\"28\",\r\n    \"salary\":500,\r\n    \"name\":\"Anton\",\r\n    \"auth_token\":\"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"let resp = pm.response.json();\r",
							"\r",
							"//Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"    \"type\":\"object\",\r",
							"    \"properties\":{\r",
							"        \"age\":{\r",
							"            \"type\":\"number\"\r",
							"        },\r",
							"        \"name\":\"string\"\r",
							"    },\r",
							"    \"properties\": {\r",
							"        \"salary\":{\r",
							"            \"type\":\"array\",\r",
							"            \"items\": [\r",
							"                {\"type\":\"number\"},\r",
							"                {\"type\":\"string\"},\r",
							"                {\"type\":\"string\"}\r",
							"            ]\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"\r",
							"pm.test('Проверка структуры json в ответе', function() {\r",
							"    pm.expect(tv4.validate(resp, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"let salary_0 = resp.salary[0]\r",
							"let salary_1 = resp.salary[1]\r",
							"let salary_2 = resp.salary[2]\r",
							"\r",
							"//console.log (salary_0, salary_1, salary_2)\r",
							"let req = request.data\r",
							"\r",
							"let r_sal_0 = parseInt(req.salary)\r",
							"\r",
							"pm.test(\"Check salary_0 = salary\", function () {\r",
							"    pm.expect(salary_0).to.eql(r_sal_0);\r",
							"});\r",
							"\r",
							"let r_sal_1 = parseInt(salary_1)\r",
							"\r",
							"pm.test(\"Check salary_1 = salary*2\", function () {\r",
							"    pm.expect(r_sal_1).to.eql(req.salary*2);\r",
							"});\r",
							"\r",
							"let r_sal_2 = parseInt(salary_2)\r",
							"\r",
							"pm.test(\"Check salary_2 = salary*3\", function () {\r",
							"    pm.expect(r_sal_2).to.eql(req.salary*3);\r",
							"});\r",
							"\r",
							"//проверить, что 2-й элемент массива salary больше 1-го\r",
							"pm.test(\"Проверить, что 2-й элемент массива salary больше 1-го\", () => {\r",
							"    pm.expect(r_sal_2).to.be.above(r_sal_1);\r",
							"});\r",
							"\r",
							"//проверить, что 2-й элемент массива salary больше 0-го\r",
							"pm.test(\"Проверить, что 2-й элемент массива salary больше 0-го\", () => {\r",
							"    pm.expect(r_sal_2).to.be.above(salary_0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Anton",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp = pm.response.json();\r",
							"\r",
							"//Проверка структуры json в ответе.\r",
							"\r",
							"  let schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Проверка структуры json в ответе', function() {\r",
							"    pm.expect(tv4.validate(resp, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"let wei = request.data.weight\r",
							"//console.log (wei)\r",
							"\r",
							"\r",
							"pm.test(\"Check daily_food = wei*0.012\", function () {\r",
							"    pm.expect(resp.daily_food).to.eql(wei*0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"Check daily_sleep = wei*2.5\", function () {\r",
							"    pm.expect(resp.daily_sleep).to.eql(wei*2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "80",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Anton",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let resp = pm.response.json()\r",
							"\r",
							"//Проверка структуры json в ответе.\r",
							"\r",
							"let schema = { \r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Проверка структуры json в ответе', function() {\r",
							"  pm.expect(tv4.validate(resp, schema)).to.be.true;\r",
							" });\r",
							"\r",
							" //Проверить что значение поля name = значению переменной name из окружения\r",
							"\r",
							"let e_name = environment.name\r",
							"let r_name = resp.name\r",
							"\r",
							"pm.test(\"name = environment name\", function () {\r",
							"    pm.expect(r_name).to.eql(e_name);\r",
							"});\r",
							"\r",
							"//Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"\r",
							"let req_age = request.data.age;\r",
							"\r",
							"let res_age = resp.age;\r",
							"\r",
							"\r",
							"pm.test(\"response age = request age\", function () {\r",
							"    pm.expect(req_age).to.eql(res_age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{u_salary_1.5_year}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		}
	]
}